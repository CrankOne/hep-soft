inherit: [in-docker]

# Note: this script defines few functions that are used when portages
# snapshot is located on compressed squashfs system. Internally, invokes FUSE
# mouting procedures for squashfs:
# mount:
#   $ squashfuse /tmp/gentoo-20180318.xz.sqfs $(pwd)/mountpoint
# umount:
#   $ fusermount -u $(pwd)/mountpoint

depends:
    - gentoo-portages

buildVarsWeak:
    - MEMORY_LIMIT

buildVars:
    - FUSERUMOUNT_CMD
    - QUERY_MOUNTPOINT_CMD

buildTools: [docker]
buildScript: |
    # Get the portages snapshot ID
    PORTAGES_SNAPSHOT_ID=$( readlink -f ${BOB_DEP_PATHS[gentoo-portages]}/gentoo-portages.xz.sqfs \
                          | sed -E 's/.*gentoo-portages\.([[:digit:]]+).xz.sqfs/\1/g' )
    if [ -z "${PORTAGES_SNAPSHOT_ID}" ] ; then
        (>&2 echo "Failed to deduce the PORTAGES_SNAPSHOT_ID.")
        exit 1
    fi
    #
    # Squashfs portages
    mount_sqfs_portages() {
        # $1 is the mountpoint.
        TARGET=$(realpath $1)
        # ^^^ TODO: store this mountpoint for further capture
        if [ ! -d "$TARGET" ] ; then
            mkdir -p "$TARGET"
        else
            if $QUERY_MOUNTPOINT_CMD "$TARGET" ; then
                (>&2 echo "Warning $TARGET is mounted. Unmounting prior to proceed.")
                $FUSERUMOUNT_CMD "$TARGET"
            fi
        fi
        if [ -e ${BOB_DEP_PATHS[gentoo-portages]}/gentoo-portages.xz.sqfs ] ; then
            squashfuse -o allow_other ${BOB_DEP_PATHS[gentoo-portages]}/gentoo-portages.xz.sqfs $1
            if [ $? -eq 0 ] ; then
                trap "umount_sqfs_portages $1" EXIT
            else
                (>&2 echo "Failed to mount ${BOB_DEP_PATHS[gentoo-portages]}/gentoo-portages.xz.sqfs on $1 with squashfuse.")
                exit 1
            fi
        else
            (>&2 echo "Has no snapshot archive ${BOB_DEP_PATHS[gentoo-portages]}/gentoo-portages.xz.sqfs to mount into $1.")
            exit 1
        fi
    }
    umount_sqfs_portages() {
        if [ -d $1 ] ; then
            $QUERY_MOUNTPOINT_CMD $1
            if [ $? -eq 0 ] ; then
                $FUSERUMOUNT_CMD $1
            else
                (>&2 echo "Cleanup warning: $1 not mounted.")
            fi
        else
            (>&2 echo "Cleanup warning: is $1 not a dir.")
        fi
    }

##
## General binfarm interface
#run_binfarm() {
#    # args:
#    #   $1 -- container name
#    #   $2 -- dist packages dir name (./dist and ./pdkg)
#    #   $3 -- portages directory volume name (TODO: make it optional)
#    if [ "$(docker ps -a | grep $1)" ] ; then
#        (>&2 echo "Container $1 exists. Preserving it and falling back...")
#        exit 1  # existing container
#    fi
#    if [[ ! -d $2 || ! -d $2/dist || $2/pkg ]] ; then
#        mkdir -p $2/dist    # for Gentoo distfiles
#        mkdir -p $2/pkg     # for generated binary packages
#    fi
#    mount_sqfs_portages $3
#    if [ $? -ne 0 ] ; then
#        exit 2  # failed to mount portage
#    fi
#    # TODO: check, if portages dir is given
#    # TODO: check, if we aren't at SELinux and change z switch
#    ${DOCKER_CMD} run -d --memory=${MEMORY_LIMIT} \
#                          -v $(realpath $2):/hepfarm:Z \
#                          -v $(realpath $3):/usr/portage:ro \
#                          --name $1 \
#                          ${GENTOO_BASE_IMAGE} /bin/sh -c "tail -f /dev/null"
#    if [ $? -eq 0 ] ; then
#        trap "stop_binfarm  $1 $3" EXIT
#    else
#        exit 3  # failed to run container
#    fi
#}
#stop_binfarm() {
#    if [ "$(docker ps -a | grep $1)" ] ; then
#        CONTAINER_STATUS=$(docker inspect -f {{.State.Running}} $1)
#        if [[ false != $CONTAINER_STATUS ]] ; then
#            echo "Stopping container \"$1\""
#            ${DOCKER_CMD} stop $1
#        fi
#        ${DOCKER_CMD} rm $1
#    fi
#    umount_sqfs_portages $2
#}
#exec_on_binfarm() {
#    if [ "$(docker ps -a | grep $1)" ] ; then
#        CONTAINER_STATUS=$(docker inspect -f {{.State.Running}} $1)
#        if [[ false == $CONTAINER_STATUS ]] ; then
#            (>&2 echo "Error: container $1 is stopped (.State.Running=$CONTAINER_STATUS).")
#            exit 1
#        fi
#    else
#        (>&2 echo "Has no container $1.")
#        exit 1
#    fi
#    echo -e "[class gentoo-build] exec on container \033[1;32m$1\033[0m:"
#    #read -r -d "\n" CMDS
#    F=$(mktemp -p $2)
#    tee $F
#    #printf '%s\n' "${CMDS[@]}" > $F
#    ${DOCKER_CMD} exec -i "$1" /bin/bash /hepfarm/$(basename $F)
#    rm $F
#}
##PORTAGES_SNAPSHOT=(${BOB_DEP_PATHS[gentoo-portages]}/gentoo-*)
##PORTAGES_SNAPSHOT_FILE=$(basename "$PORTAGES_SNAPSHOT")
##if [[ "$PORTAGES_SNAPSHOT_FILE" == *.sqfs ]] ; then
##    mount_sqfs_portages
##    trap umount_sqfs_portages EXIT
##    ${DOCKER_COMMAND} run --name #... binfarm-gentoo-base:${GENTOO_STAGE3_TAG}
##    umount_sqfs_portages
##else
##    (>&2 echo "Error: unable to mount portages in \"$PORTAGES_SNAPSHOT_FILE\".")
##    exit 1
##fi
