# NOTE: needs cURL, sed, basename, docker, ln, readlink
root: true  #< XXX

inherit: [gentoo-build, fetch]

# Obtains stage3 Gentoo archive: latest, or referred with GENTOO_STG3_TAG
# config var. Saves it in `src/' and creates symlink `stage3.tar.xz' referring
# to `stage3-${ARCH}-${TAG}.tar.xz' file.

checkoutVars:
    - GENTOO_DISTFILES_MIRROR
    - GENTOO_ARCH
    - GENTOO_STG3_TAG

checkoutScript: |
    mkdir -p . && cd .
    if [ ! -z "${GENTOO_STG3_TAG}" ] ; then
        GENTOO_STG3_ARCHIVE="${GENTOO_DISTFILES_MIRROR}/releases/${GENTOO_ARCH}/autobuilds/${GENTOO_STG3_TAG}/stage3-${GENTOO_ARCH}-${GENTOO_STG3_TAG}.tar.xz"
    else
        # If GENTOO_STG3_TAG is not set, we have to deduce it automatically from
        # the distfiles mirror available:
        GENTOO_REM_DIR="${GENTOO_DISTFILES_MIRROR}/releases/${GENTOO_ARCH}/autobuilds/current-stage3-amd64/"
        IMAGE_FILE=$(curl -s "$GENTOO_REM_DIR" --list-only | sed -n \
            's%.*href="\(stage3-'${GENTOO_ARCH}'\+-[^-.]\+\.tar\.xz\)".*%\n\1%; ta; b; :a; s%.*\n%%; p')
        if [ -z "${IMAGE_FILE}" ] ; then
            (>&2 echo "Unable to retrieve any .tar.xz from ${GENTOO_REM_DIR} remote catalogue." )
            exit 1
        fi
        # There might be more than one file:
        if (( $(grep -c . <<<"$IMAGE_FILE") > 1 )) ; then
            (>&2 echo -e "More than one .tar.xz file found at ${GENTOO_REM_DIR} remote catalogue:\n${IMAGE_FILE}" )
            exit 1
        fi
        GENTOO_STG3_TAG=$(echo "${IMAGE_FILE}" | sed -n 's/stage3-'${GENTOO_ARCH}'-\([^-.]\+\)\.tar\.xz/\1/p')
        # Check that we've indeed had set something
        if [ -z "${GENTOO_STG3_TAG}" ] ; then
            (>&2 echo "Unable to retrieve any version tag from ${IMAGE_FILE} remote file name found by automatic substitution." )
            exit 1
        else
            (>&2 echo "Gentoo stage3 version tag has been automatically resolved to ${GENTOO_STG3_TAG}." )
        fi
        # Set the source directory for fetching
        GENTOO_STG3_ARCHIVE="${GENTOO_DISTFILES_MIRROR}/releases/${GENTOO_ARCH}/autobuilds/current-stage3-${GENTOO_ARCH}/stage3-${GENTOO_ARCH}-${GENTOO_STG3_TAG}.tar.xz"
    fi

    # Assure the stage3 archive is available
    if [ ! -e $(basename "${GENTOO_STG3_ARCHIVE}") ] ; then
        fetch_file "${GENTOO_STG3_ARCHIVE}"
    fi
    ln -fs $(basename "${GENTOO_STG3_ARCHIVE}") stage3.tar.xz

# Creates new docker image based on the stage3 archive. Produces:
# * the image stored in global docker storage (thus, normally referrable
#   with `$ docker images') and makes the back-up portage snapshot. This image
#   is the exact form of stage3 (without any modifications done).
# * directory named `packages.${TAG}' at the `build/' containing unpacked
#   portages tree

buildVars:
    - GENTOO_ARCH
    - GENTOO_STG3_TAG
    - BINFARM_BUILD_TYPE
    - GENTOO_PROFILE

buildScript: |
    if [ -z "${PORTAGES_SNAPSHOT_ID}" ] ; then
        (>&2 echo "Failed to deduce the PORTAGES_SNAPSHOT_ID.")
        exit 1
    else
        (>&2 echo "PORTAGES_SNAPSHOT_ID=${PORTAGES_SNAPSHOT_ID}")
    fi

    # Deduce the mount options with optional SELinux workaround
    MOUNTOPTS=$([[ selinux_check ]] && echo z || echo rw)

    # Retrieve the stage3 filename based on currently active symlink
    ln -fs $1/stage3.tar.xz stage3.tar.xz
    GENTOO_STG3_ARCHIVE=$(readlink -f stage3.tar.xz)
    GENTOO_STG3_ARCHIVE=$(basename $GENTOO_STG3_ARCHIVE)
    GENTOO_STG3_TAG=$(echo "${GENTOO_STG3_ARCHIVE}" | sed -n 's/stage3-'${GENTOO_ARCH}'-\([^-.]\+\)\.tar\.xz/\1/p')
    if [ -z "${GENTOO_STG3_TAG}" ] ; then
        ( >&2 echo "Unable to obtain stage3 tag." )
        exit 1
    fi

    # Create new Docker container from scratch exploiting fetched stage3
    # archive.
    if [ ! -e stage3-${GENTOO_ARCH}-${GENTOO_STG3_TAG}.tar ] ; then
        unxz < $1/stage3.tar.xz > stage3-${GENTOO_ARCH}-${GENTOO_STG3_TAG}.tar
    fi
    IMAGE_NAME=gentoo-stage3-${GENTOO_ARCH}
    IMGSLINE=$($DOCKER_CMD images ${IMAGE_NAME})

    # Create the image if it does not exist
    if ! echo "${IMGSLINE}" | grep ${GENTOO_STG3_TAG} ; then
        # No image available -- import from archive
        echo "Docker import: stage3-${GENTOO_ARCH}-${GENTOO_STG3_TAG}.tar -> ${IMAGE_NAME}:${GENTOO_STG3_TAG}"
        $DOCKER_CMD import stage3-${GENTOO_ARCH}-${GENTOO_STG3_TAG}.tar "${IMAGE_NAME}:${GENTOO_STG3_TAG}"
        # line to unpack image (deprecated):
        #   tar xpvf stage3-*.tar.bz2 --xattrs-include='*.*' --numeric-owner
        IMGSLINE=$($DOCKER_CMD images ${IMAGE_NAME})
    fi
    IMGSLINE=$(echo "${IMGSLINE}" | grep ${GENTOO_STG3_TAG})

    # Read the image identifiers for subsequent usage
    read BINFARM_IMG_REPO \
         BINFARM_IMG_TAG \
         BINFARM_IMG_ID \
            <<<$(echo $IMGSLINE | awk '{print $1,$2,$3}')
    if [ -z "${BINFARM_IMG_ID}" ] ; then
        (>&2 echo "Unable to find out the docker image ID.")
    else
        echo "Found ID of \"${IMAGE_NAME}\" image: ${BINFARM_IMG_ID}."
    fi

    # put assets for container execution
    mkdir -p pkgs.${BINFARM_IMG_TAG} \
             portages.${PORTAGES_SNAPSHOT_ID} \
             configs
    case ${BINFARM_BUILD_TYPE} in
        'dbg')
            echo 'FEATURES="nostrip buildpkg"' > configs/make.conf
            ;;
        'opt')
            echo 'FEATURES="buildpkg"' > configs/make.conf
            ;;
        *)
            (>&2 echo "The BINFARM_BUILD_TYPE=\"${BINFARM_BUILD_TYPE}\" is not supported.")
            ;;
    esac
    cat $<<gentoo-binfarm/make.conf.common>> >> configs/make.conf
    case ${BINFARM_BUILD_TYPE} in
        'dbg')
            echo 'USE="debug sqlite"' >> configs/make.conf
            ;;
        'opt')
            echo 'USE="sqlite"' >> configs/make.conf
            ;;
    esac
    cp -f $<<gentoo-binfarm/init-binfarm.sh>> configs/init-binfarm.sh

    BINFARM_CONTAINER_NAME="gentoo_binfarm_${BINFARM_BUILD_TYPE}_${GENTOO_PROFILE}_${GENTOO_STG3_TAG}"
    if $DOCKER_CMD container ls -a | grep ${BINFARM_CONTAINER_NAME} ; then
        echo "Removing existing container ${BINFARM_CONTAINER_NAME}..."
        $DOCKER_CMD container rm ${BINFARM_CONTAINER_NAME}
    fi

    # Rebuild the base stage3 with applied configs
    mount_sqfs_portages ./portages.${PORTAGES_SNAPSHOT_ID}
    # NOTE: the portages mountpoint (squashfs) is marked here as `ro' instead
    # of optional `z' as for SELinux' setenfoce=1 `z' option weirdly does not
    # permit read access to the mountpoint from within a running container.
    # NOTE: the `SYS_PTRACE' and `--security-opt seccomp=unconfined' were
    # needed to avoid various xattrs issue on the portages build directory,
    # update gcc, etc.
    $DOCKER_CMD run --name ${BINFARM_CONTAINER_NAME} \
        --cap-add=SYS_PTRACE --security-opt seccomp=unconfined \
        --volume $(readlink -f ./portages.${PORTAGES_SNAPSHOT_ID}):/var/db/repos/gentoo:ro \
        --volume $(readlink -f ./pkgs.${BINFARM_IMG_TAG}):/var/cache/binpkgs:${MOUNTOPTS} \
        --volume $(readlink -f ./configs):/opt/binfarm.in:${MOUNTOPTS} \
        --tmpfs /var/tmp/portage:exec \
        --workdir /opt/binfarm.in \
        ${BINFARM_IMG_ID} \
        /bin/sh /opt/binfarm.in/init-binfarm.sh ${BINFARM_BUILD_TYPE} ${GENTOO_PROFILE}
    umount_sqfs_portages ./portages.${PORTAGES_SNAPSHOT_ID}
    ln -sf ./pkgs.${BINFARM_IMG_TAG} pkgs
    # Commit container to image
    if ! $DOCKER_CMD container ls -a | grep ${BINFARM_CONTAINER_NAME} ; then
        (>&2 echo "Couldn't find container ${BINFARM_CONTAINER_NAME}.")
        exit 1
    fi
    CONTAINER_ID=$($DOCKER_CMD container ls -a | grep ${BINFARM_CONTAINER_NAME} | awk '{print $1}')
    $DOCKER_CMD commit --change 'CMD ["/bin/false"]' ${CONTAINER_ID} gentoo-binfarm:latest
    # Remove stopped container
    $DOCKER_CMD container rm ${CONTAINER_ID}

packageVars:
    - GENTOO_ARCH
    - DOCKER_CMD
    - BINFARM_IMAGE_VERSION

packageScript: |
    # Retrieve the GENTOO_STG3_TAG based on the stage3 tag
    GENTOO_STG3_TAG=$( readlink -f $1/stage3.tar.xz \
                     | sed -n 's/.\+stage3-amd64-\([^-.]\+\)\.tar\.xz/\1/p')
    # Archivate image
    IMAGE_ARCHIVE_NAME=gentoo-binfarm-${GENTOO_ARCH}-${GENTOO_STG3_TAG}-${BINFARM_IMAGE_VERSION}.tar
    ${DOCKER_CMD} tag gentoo-binfarm:latest gentoo-binfarm:v${BINFARM_IMAGE_VERSION}
    echo "Writing compressed image to ${IMAGE_ARCHIVE_NAME}.bz2 ..."
    ${DOCKER_CMD} save gentoo-binfarm:latest | bzip2 > ${IMAGE_ARCHIVE_NAME}.bz2
    ln -fs ${IMAGE_ARCHIVE_NAME}.bz2 gentoo-binfarm-latest.tar.gz
    # Re-create symlink to the packages dir
    ln -sf $1/pkgs

